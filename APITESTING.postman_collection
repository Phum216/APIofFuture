{
	"info": {
		"_postman_id": "549364ff-4d4f-4995-a4d9-ec6f98d7fa69",
		"name": "API TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43592779",
		"_collection_link": "https://future-test.postman.co/workspace/G-TEST~149237c6-8220-4cf7-9286-40a8afc185f3/collection/43592779-549364ff-4d4f-4995-a4d9-ec6f98d7fa69?action=share&source=collection_link&creator=43592779"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response body succes\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"aut\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}posts",
					"host": [
						"{{BaseURL}}posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify name\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"qui est esse\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the field id\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"});   \r",
							"\r",
							"pm.test(\"Response has the field title\", function () {    \r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the field body\", function () {\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}posts/2",
					"host": [
						"{{BaseURL}}posts"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(101);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify body\", function () {\r",
							"    pm.expect(jsonData.body).to.eql(\"Tester\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"GUY\");\r",
							"});\r",
							"\r",
							"\r",
							"//pm.test(\"Response time is less than 350ms\", function () {\r",
							"    //pm.expect(pm.response.responseTime).to.be.below(350);\r",
							"//});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"userId is 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"GUY\",\r\n   \"body\": \"Tester\",\r\n   \"userId\": 1\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}posts",
					"host": [
						"{{BaseURL}}posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify title\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.title).to.eql(\"Futureskill\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"pm.environment.set(\"ID\", response.id);\r",
							"\r",
							"pm.test(\"body matches\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"body\",\"bar\");\r",
							"});\r",
							"\r",
							"pm.test(\"title matches\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\",\"Futureskill\");\r",
							"});\r",
							"\r",
							"pm.test(\"id matches\", function () {\r",
							"    pm.expect(pm.response.text()).to.include\r",
							"});\r",
							"\r",
							"\r",
							"//pm.test(\"Response time is less than 700ms\", function () {\r",
							"    //pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"//});\r",
							"\r",
							"pm.test(\"Your id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Futureskill\",\r\n   \"body\": \"bar\"\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}posts/:id",
					"host": [
						"{{BaseURL}}posts"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is {}\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.eql({});\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}posts/:id",
					"host": [
						"{{BaseURL}}posts"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}